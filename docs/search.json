[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assessments.html",
    "href": "assessments.html",
    "title": "SQMB",
    "section": "",
    "text": "This course will be assessed on the basis of a 3 formative assessments and 2 summative assessments.\nFormative assessments are assessments for which you might receive feedback on, but which will not be marked. These will give you a chance to keep on track with the course contents and get interim feedback that will better prepare you for the summative assessment. See below for info.\nYou will have to submit two summative assessments. They will weight 40% and 60% of the final mark.\nSee below for details."
  },
  {
    "objectID": "assessments.html#formative-assessments",
    "href": "assessments.html#formative-assessments",
    "title": "SQMB",
    "section": "Formative assessments",
    "text": "Formative assessments\n\n\n\n\n\n\nFormative 1: Week 4\n\n\n\n\n\nData summary and visualisation\n\nGiven a data table, submit a short and concise report with summary measurements and plots illustrating patterns in the data.\nCriticise a given plot and provide an appropriate plot for the given data.\nAnswer a set of multiple-choice and true/false questions.\n\n\n\n\n\n\n\n\n\n\nFormative 2: Week 6\n\n\n\n\n\nLinear model fitting and reporting\n\nGiven a data table, submit a short and concise report of a linear model fitted to the data.\nMake sure you include:\n\nA description of the model specification.\nA description of the results.\nAt least one plot generated with conditiona_effects().\n\nCriticise a given linear model and provide code for an appropriate linear model. Just the code is sufficient (you don’t need to run it nor report it).\n\n\n\n\n\n\n\n\n\n\nFormative 3: Week 8\n\n\n\n\n\nData analysis report\n\nGiven a data table, submit a short and concise data analysis report, including summary measures, plots and a linear model.\nMake sure you include:\n\nSummary measures and plots of the raw data.\nA description of the linear model specification and results.\nPlots generated by conditional_effects()."
  },
  {
    "objectID": "assessments.html#summative-assessments",
    "href": "assessments.html#summative-assessments",
    "title": "SQMB",
    "section": "Summative assessments",
    "text": "Summative assessments\n\n\n\n\n\n\nSummative 1 - Thu 30 March\n\n\n\n\n\nDue on Thursday 30 March at noon\nThe first summative contains a series of guided exercises. You can find the summative materials and exercises here: TBA.\n\n\n\n\n\n\n\n\n\nSummative 2 - Thu 27 April\n\n\n\n\n\nDue on Thursday 27 April at noon\nThe second summative will be in the form of a data analysis report. You will choose a data set from a list or you will find a data set yourself for this assessment (guidance will be provided and I will have to approve the data set you picked).\nYou can find the list of data sets here: TBA."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics and Quantitative Methods (Semester 2)",
    "section": "",
    "text": "Welcome to the main site of the course Statistics and Quantitative Methods (Semester 2).\nThis will be your go-to place throughout the semester.\nThis course is an introduction to study design, statistics and quantitative data analysis as commonly employed in linguistics, using the R software."
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Statistics and Quantitative Methods (Semester 2)",
    "section": "Course description",
    "text": "Course description\nThe course will cover the basics of statistics and quantitative data analysis, and how to design studies that effectively address the intended research questions. Students will learn the principles of data visualisation and statistical modelling and develop the practical skills necessary to perform such analyses. The course will draw examples from different branches of linguistics and will provide students with hands-on experience in open science practices.\nThe course will teach students how to carry out Bayesian statistical inference using a variety of statistical models, and how to interpret results from traditional Null Hypothesis Significance Testing (i.e. p-values and confidence intervals)."
  },
  {
    "objectID": "index.html#r-and-rstudio",
    "href": "index.html#r-and-rstudio",
    "title": "Statistics and Quantitative Methods (Semester 2)",
    "section": "R and RStudio",
    "text": "R and RStudio\nThe workshops will be held in the PPLS Computer Lab. The Lab is equipped with PCs running Windows and Ubuntu. The Lab PCs will have all the necessary software.\nYou can choose to use your own laptop instead of the Lab PCs.\nThis requires you to have both R and RStudio installed on your laptop.\n\n\n\n\n\n\nInstallation instructions\n\n\n\nNOTE: If you have installed either R or RStudio prior to January 2023, please delete both R and RStudio from your laptop and reinstall them.\nTo (re)install R and RStudio, follow the instructions for Step 1 and 2 here: https://posit.co/download/rstudio-desktop/."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "SQMB",
    "section": "",
    "text": "This course is an introduction to quantitative data analysis, as commonly employed in linguistics, using the R software.\nWe will cover the following topics:\n\nThe basics of quantitative data analysis.\nData preparation.\nData summaries.\nPrinciples of data visualisation.\nStatistical modelling with linear models.\nStatistical inference using Bayesian inference.\n\nAt completion of the course you will have gained the following skills:\n\nImport common data formats, tidy and transform data.\nChoosing and reporting appropriate summary measures.\nUsing compelling visualisations to communicate a specific message about patterns in the data.\nMaster linear models for different types of data (continuous measures and binary outcomes).\nUsing Bayesian inference to answer research questions and avoid common interpretation pitfalls.\n\nExamples from different branches of linguistics will be used to provide you with hands-on experience in quantitative data analysis and Open Research practices."
  },
  {
    "objectID": "syllabus.html#weekly-plan",
    "href": "syllabus.html#weekly-plan",
    "title": "SQMB",
    "section": "Weekly plan",
    "text": "Weekly plan\n\nWeek 1: Quantitative methods and uncertainty\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat is quantitative data analysis?\nWhat is the inference process?\nHow can we talk about uncertainty and variability?\nWhich are the limits of quantitative methods?\n\nSkills\n\nThink critically about statistics, uncertainty and variability.\nUse R to perform simple calculations.\nMaster the basics of the programming language R.\nUse RStudio.\n\n\n\n\n\n\n\n\n\n\nHomework\n\n\n\n\n\nIntake form\n\nYou must complete the intake form before coming to the Tuesday lecture.\nThe link to the form will be circulated via Learn.\n\nInstall R and RStudio\n\nIf you with to use your own laptop for the workshops, instead of the Lab PCs, you need to install both R and RStudio.\nNOTE: If you have installed either R or RStudio prior to January 2023, please make sure you delete both R and RStudio from your laptop.\nPlease, follow the instructions for Step 1 and 2 here: https://posit.co/download/rstudio-desktop/.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\n\nS4LR Ch. 1 and R4DS Ch. 1, Ch. 2.\nDarwin Holmes 2020. Researcher Positionality - A Consideration of Its Influence and Place in Qualitative Research - A New Researcher Guide\nJafar 2018. What is positionality and should it be expressed in quantitative studies?\n\nFrom the lecture:\n\nSilberzahn et al. 2018. Many Analysts, One Data Set: Making Transparent How Variations in Analytic Choices Affect Results\nCoretta et al. (in principle). Multidimensional signals and analytic flexibility: Estimating degrees of freedom in human speech analyses\nCumming 2014. The New Statistics: Why and How\nKurschke and Liddell 2018. The Bayesian New Statistics: Hypothesis testing, estimation, meta-analysis, and power analysis from a Bayesian perspective\n\n\n\n\n\n\nWeek 2: Data wrangling\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are the types of statistical variables?\nWhich summary measures are appropriate for which types of variables?\nWhat are common measures central tendency?\nWhat are common measures of dispersion?\n\nSkills\n\nOrganise files efficiently.\nImport tabular data in R.\nObtain mean, median, mode, range and standard deviation.\nUse R scripts to save and reuse code.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\n\n\nWorkshop files (right-click and download):\n\nshallow.csv\n\n\n\n\n\n\n\nWeek 3: Data visualisation\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are the principles of good data visualisation?\nWhich are the main components of a plot?\nWhich are the appropriate plots for different types of data?\nHow can we visualise uncertainty?\n\nSkills\n\nCreate common types of plots with ggplot2.\nUse colour and shape to effectively convey meaning.\nDescribe a plot in writing and comment on observable patterns.\nFilter and mutate data.\n\n\n\n\n\n\nWeek 4: Linear models, Basics I\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are statistical models useful for?\nWhat are statistical populations, samples and distributions?\nWhat are statistical variables and which type of relationships exist between variables?\nWhat is a linear model and which are its components?\n\nSkills\n\nFit a linear model with one continuous outcome variable and one continuous predictor with brm().\nInterpret the summary of the model and understand the meaning of the reported coefficients.\nPlot and diagnose linear models.\nDescribe the model specification and results in writing.\n\n\n\n\n\n\nWeek 5: Linear models, Basics II\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nHow can we use linear models with categorical (rather than continuous) predictors?\nWhy do we need to code categorical predictors as numbers? And which are the most common coding methods?\nHow can we represent a linear model using a formula?\nHow do you interpret a linear model with both continuous and categorical predictors?\n\nSkills\n\nMaster contrast coding in R for categorical predictors.\nFit, interpret and plot linear models with continuous and categorical predictors.\nUnderstand treatment and sum coding.\nAdvanced reporting of model specification and results."
  },
  {
    "objectID": "tutorials/tutorial-w01.html",
    "href": "tutorials/tutorial-w01.html",
    "title": "SQM tutorial - Week 1",
    "section": "",
    "text": "R can be used to analyse all sorts of data, from tabular data (also known as “spreadsheets”), textual data, geographic data and even images.\n\nThis course will focus on the analysis of tabular data, since all of the techniques relevant to this type of data also apply to the other types.\n\nThe R community is a very inclusive community and it’s easy to find help. There are several groups that promote R in minority/minoritised groups, like R-Ladies, Africa R, and Rainbow R just to mention a few.\nMoreover, R is open source and free!"
  },
  {
    "objectID": "tutorials/tutorial-w01.html#r-vs-rstudio",
    "href": "tutorials/tutorial-w01.html#r-vs-rstudio",
    "title": "SQM tutorial - Week 1",
    "section": "R vs RStudio",
    "text": "R vs RStudio\nBeginners usually have trouble understanding the difference between R and RStudio.\nLet’s use a car analogy.\nWhat makes the car go is the engine and you can control the engine through the dashboard.\nYou can think of R as an engine and RStudio as the dashboard.\n\n\n\n\n\n\n\nR\n\n\n\n\nR is a programming language.\nWe use programming languages to interact with computers.\nYou run commands written in a console and the related task is executed.\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\n\nRStudio is an Integrated Development Environment or IDE.\nIt helps you using R more efficiently.\nIt has a graphical user interface or GUI.\n\n\n\nThe next section will give you a tour of RStudio."
  },
  {
    "objectID": "tutorials/tutorial-w01.html#rstudio-1",
    "href": "tutorials/tutorial-w01.html#rstudio-1",
    "title": "SQM tutorial - Week 1",
    "section": "RStudio",
    "text": "RStudio\nWhen you open RStudio, you can see the window is divided into 4 panels:\n\nRed (top-left): the file Editor.\nBlue (bottom-left): the Console.\nGreen (top-right): the Environment tab.\nPurple (bottom-right): the Files tab.\n\n\nThe file Editor is where you can edit files, like you would in any text editor.\nThe Console is where R commands can be executed. Think of this as the interface to R.\nThe Environment tab lists the objects created with R, while in the Files tab you can navigate folders on your computer to get to files and open them in the file Editor.\n\nRStudio projects\nRStudio is an IDE (see above) which allows you to work efficiently with R, all in one place.\nNote that files and data live in folders on your computer, outside of RStudio: do not think of RStudio as an app where you can save files in.\nAll the files that you see in the Files tab are files on your computer and you can access them from the Finder or File Explorer as you would with any other file.\nIn principle, you can open RStudio and then navigate to any folder or file on your computer.\nHowever, there is a more efficient way of working with RStudio: RStudio Projects.\n\n\n\n\n\n\nRStudio Projects\n\n\n\nAn RStudio Project is a folder on your computer that has an .Rproj file.\n\n\nYou can create as many RStudio Projects as you wish, and I recommend to create one per project (your dissertation, a research project, etc…).\nWe will create an RStudio Project for this course. You will be using this Project throughout the semester.\nTo create an RStudio Project, click on the button that looks like a transparent light blue box with a plus, in the top-left corner of RStudio. A window like the one below will pop up.\n\nClick on New Directory then New Project.\n\nNow, this will create a new folder (aka directory) on your computer and will make that an RStudio Project.\nGive a name to your new project, something like the name of the course and year.\nThen you need to specify where to create this new folder/Project. Click on Browse… and navigate to the folder you want to create the new folder/Project in.\nWhen done, click on Create Project. RStudio will automatically open your new project.\n\nYou know you are in an RStudio Project because you can see the name of the Project in the top-right corner of RStudio.\n\n\n\n\n\n\nNote\n\n\n\nWhen working through these tutorials, always make sure you are in the course RStudio Project you just created.\n\n\nIf your see Project (none) in the top-right corner, that means your are not in an RStudio Project.\nThere are several ways of opening an RStudio Project:\n\nYou can go to the RStudio Project folder in Finder or File Explorer and double click on the Rproj file.\nYou can click on File > Open Project in the RStudio menu.\nYou can click on the project name in the top-right corner of RStudio, which will bring up a list of projects. Click on the desired project to open it.\n\n\n\nA few important settings\nBefore moving on, there are a few important settings that you need to change.\n\n\nOpen the RStudio preferences (macOS: RStudio > Preferences..., Windows: Tools > Global options...).\nUn-tick Restore .RData into workspace at startup.\nSelect Never in Save workspace to .RData on exit."
  },
  {
    "objectID": "tutorials/tutorial-w01.html#r-basics",
    "href": "tutorials/tutorial-w01.html#r-basics",
    "title": "SQM tutorial - Week 1",
    "section": "R basics",
    "text": "R basics\n\nR as a calculator\nWrite the following in the Console, then press ENTER: 1 + 2.\nFantastic! You should see that the answer to the addition has been printed in the Console, like this:\n[1] 3\nNow, try some more operations (write each of the following in the Console and press ENTER). Feel free to add your own to the mix!\n\n67 - 13\n2 * 4\n268 / 43\n\nYou can also chain multiple operations.\n\n6 + 4 - 1 + 2\n4 * 2 + 3 * 2\n\n\n\nVariables\n\nForget-me-not.\n\nMost times, we want to store a certain value so that we can use it again later.\nWe can achieve this by creating variables.\n\n\n\n\n\n\nVariable\n\n\n\nA variable holds one or more values and it’s stored in the computer memory for later use.\n\n\nYou can create a variable by using the assignment operator <-.\nLet’s assign the value 156 to the variable my_num.\n\nmy_num <- 156\n\nNow, check the list of variables in the Environment tab of the top-right panel of RStudio. You should see the my_num variable and its value there.\nNow, you can just call the variable back when you need it! Write the following in the Console and press ENTER.\n\nmy_num\n\n[1] 156\n\n\nA variable like my_num is also called a numeric vector: i.e. a vector that contains a number (hence numeric).\n\n\n\n\n\n\nVector\n\n\n\nA vector is an R object that contains one or more values of the same type.\n\n\nLet’s now try some operations using variables.\n\nincome <- 1200\nexpenses <- 500\nincome - expenses\n\n[1] 700\n\n\nSee? You can use operations with variables too!\nAnd you can also go all the way with variables.\n\nsavings <- income - expenses\n\nAnd check the value…\n\nsavings\n\n[1] 700\n\n\nVectors can hold more than one item or value.\nJust use the combine c() function to create a vector containing multiple values.\nThe following are all numeric vectors.\n\none_i <- 6\n# Vector with 2 values\ntwo_i <- c(6, 8)\n# Vector with 3 values\nthree_i <- c(6, 8, 42)\n\nCheck the list of variables in the Environment tab. You will see now that before the values of two_i and three_i you get the vector type num for numeric. (If the vector has only one value, you don’t see the type in the Enviroment list but it is still of a particular type).\n\n\n\n\n\n\nNumeric vector\n\n\n\nA numeric vector is a vector that holds one or more numeric values.\n\n\nNote that the following are the same:\n\none_i <- 6\none_i\n\n[1] 6\n\none_ii <- c(6)\none_ii\n\n[1] 6\n\n\n\n\nFunctions\n\nR cannot function without… functions.\n\n\n\n\n\n\n\nFunction\n\n\n\nA function is an operation performed on one or more arguments.\n\n\nA function in R has the form function() where:\n\nfunction is the name of the function, like sum.\n() are round parentheses, inside of which you write arguments, separated by commas.\n\nLet’s see an example:\n\nsum(3, 5)\n\n[1] 8\n\n\nThe sum() function sums the number listed as arguments. Above, the arguments are 3 and 5.\nAnd of course arguments can be vectors!\n\nmy_nums <- c(3, 5, 7)\n\nsum(my_nums)\n\n[1] 15\n\nmean(my_nums)\n\n[1] 5\n\n\n\n\nString and logical vectors\n\nNot just numbers.\n\nWe have seen that variables can hold numeric vectors. But vectors are not restricted to being numeric. They can also store strings.\nA string is basically a set of characters (a word, a sentence, a full text).\nIn R, strings have to be quoted using double quotes \" \".\nChange the following strings to your name and surname. Remember to keep the double quotes\n\nname <- \"Stefano\"\nsurname <- \"Coretta\"\n\nname\n\n[1] \"Stefano\"\n\n\nStrings can be used as arguments in functions, like numbers can.\n\ncat(\"My name is\", name, surname)\n\nMy name is Stefano Coretta\n\n\nRemember that you can reuse the same variable name to override the variable value.\n\nname <- \"Raj\"\n\ncat(\"My name is\", name, surname)\n\nMy name is Raj Coretta\n\n\nYou can combine multiple strings into a character vector, using c().\n\n\n\n\n\n\nCharacter vector\n\n\n\nA character vector is a vector that holds one or more strings.\n\n\n\nfruit <- c(\"apple\", \"oranges\", \"bananas\")\nfruit\n\n[1] \"apple\"   \"oranges\" \"bananas\"\n\n\nCheck the Environment tab. Character vectors have chr before the values.\nAnother type of vector is one that contains either TRUE or FALSE. Vectors of this type are called logical vectors and they are listed as logi in the Environment tab.\n\n\n\n\n\n\nLogical vector\n\n\n\nA logical vector is a vector that holds one or more TRUE or FALSE values.\n\n\n\ngroceries <- c(\"apple\", \"flour\", \"margarine\", \"sugar\")\nin_pantry <- c(TRUE, TRUE, FALSE, TRUE)\n\nTRUE and FALSE values must be written in all capitals and without double quotes (they are not strings!)."
  },
  {
    "objectID": "tutorials/tutorial-w02.html",
    "href": "tutorials/tutorial-w02.html",
    "title": "SQM tutorial - Week 2",
    "section": "",
    "text": "In the tutorial last week you’ve been playing around with R and variables.\nBut what if you want to import data in R?\nEasy! You can use the read_csv() function to read a .csv (comma separated value) file. But before we dive in, let’s first talk about some computer basics. (You can skip this section if it’s too basic for you)\n\n\nFiles saved on your computer live in a specific place. For example, if you download a file from a browser (like Google Chrome, Safari or Firefox), the file is normally saved in the Download folder.\nBut where does the Download folder live? Usually, in your user folder! The user folder normally is the name of your account or a name you picked when you created your computer account. In my case, my user folder is simply called ste.\n\n\n\n\n\n\nUser folder\n\n\n\nThe user folder is the folder with the name of your account.\n\n\nSo, let’s assume I download a file, let’s say big_data.csv, in the Download folder of my user folder.\nNow we can represent the location of the big_data.csv file like so:\nste/\n└── Downloads/\n    └── big_data.csv\nTo mark that ste and Downloads are folders, we add a final forward slash /. That simply means “hey! I am a folder!”. big_data.csv is a file, so it doesn’t have a final /.\nInstead, the file name big_data.csv has a file extension. The file extension is .csv. A file extension marks the type of file: in this the big_data file is a .csv file, a comma separated value file (we will see an example of what that looks like later).\nDifferent file type have different file extensions:\n\nExcel files: .xlsx.\nPlain text files: .txt.\nImages: .png, .jpg, .gif.\nAudio: .mp3, .wav.\nVideo: .mp4, .mov, .avi.\nEtc…\n\n\n\n\n\n\n\nFile extension\n\n\n\nA file extension is a sequence of letters that indicates the type of a file and it’s separated with a . from the file name.\n\n\n\n\n\nNow, we can use an alternative, more succinct way, to represent the location of the big_data.csv:\nste/Downloads/big_data.csv\nThis is called a file path! It’s the path through folders that lead you to the file. Folders are separated by / and the file is marked with the extension .csv.\n\n\n\n\n\n\nFile path\n\n\n\nA file path indicates the location of a file on a computer as a path through folders that lead you to the file.\n\n\nNow the million pound question: where does ste/ live on my computer???\nUser folders are located in different places depending on the operating system you are using:\n\nOn macOS: the user folder is in /Users/.\n\nYou will notice that the is a forward slash also before the name of the folder. That is because the /Users/ folder is a top folder, i.e. there are no folders further up in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a computer running macOS would be: /Users/ste/Downloads/big_data.csv.\n\nOn Windows: the user folder is in C:/Users/\n\nYou will notice that C is followed by a colon :. That is because C is a drive, which contains files and folders. C: is not contained by any other folder, i.e. there are no other folders above C: in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a Windows computer would be: C:/Users/ste/Downloads/big_data.csv.\n\n\nWhen a file path starts from a top-most folder, we call that path the absolute file path.\n\n\n\n\n\n\nAbsolute path\n\n\n\nAn absolute path is a file path that starts with a top-most folder.\n\n\nThere is another type of file paths, called relative paths. A relative path is a partial file path, relative to a specific folder. You will learn how to use relative paths below, when we will go through importing files in R.\nImporting files in R is very easy with the tidyverse packages. You just need to know the file type (very often the file extension helps) and the location of the file (i.e. the file path).\nThe next section shows you how to import data in R!"
  },
  {
    "objectID": "tutorials/tutorial-w02.html#import-data-from-files",
    "href": "tutorials/tutorial-w02.html#import-data-from-files",
    "title": "SQM tutorial - Week 2",
    "section": "Import data from files",
    "text": "Import data from files\nFor this tutorial, we will use the data from this paper: Song et al. 2020. Second language users exhibit shallow morphological processing. DOI: 10.1017/S0272263120000170.\n\nDownload the data file\nTo download the file with the data right-click on the following link and download the file: shallow.csv. (Note that tutorial files are also linked in the Syllabus)\nCreate a folder in the RStudio project of the course called data and move the downloaded file into that folder.\nI strongly recommend that you keep the course RStudio project folder as organised as possible. The Open Science Framework has the following recommendations that apply very well to any type of research project.\n\n\n\n\n\n\nOrganising files\n\n\n\n\nUse one folder per project. This will also be your RStudio project folder.\nSeparate raw data from derived data.\nSeparate code from data.\nMake raw data read-only.\n\n\n\nTo learn more about this, check the OSF page Organising files.\nIn brief, what these recommendations mean is that you want a folder for your research project, and inside the folder two folders: one for data and one for code.\nThe data/ folder could further contain raw/ for raw data (data that should not be lost or changed, for example collected data or annotations) and derived/ for data that derives from the raw data, for example through automated data processing.\nI usually also have a separate folder called figs/ or img/ where I save plots. Of course which folders you will have it’s ultimately up to you and needs will vary depending on the project and field!\nThe rest of the tutorial will assume that you have created a folder called data/ and that shallow.csv is in that folder.\nI recommend you to start being very organised with your files from now, whether it’s for this course or your dissertation or else. I also suggest to avoid overly nested structures (for example, avoid having one folder for each week for this course).\n\n\nAbout shallow.csv\nshallow.csv is a .csv file. It looks like this (the following is just an excerpt from the file, specifically the first 5 lines):\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\nA .csv file is basically a format to save tabular data (i.e. data that looks like a table). To separate each column, a .csv file uses a comma , (hence the name “comma separated values”).\nThe first line of the file indicates the names of the columns of the table:\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nThere are 11 columns.\nThen, the rest of the file contains the other rows of the table, with values for each of the 11 columns. Of course, separated by commas.\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\nThe shallow.csv file should be placed in the tutorials/ folder of the r-mini/ folder.\nNow, let’s import the data!\n\n\nImport the data\nImporting .csv files is very easy. You can use the read_csv() function from the tidyverse.\nThe read_csv() function only requires you to specify the file path.\nOn my computer, the file path of shallow.csv is /Users/ste/r-mini/tutorials/shallow.csv, but on your computer the file path will be different, of course.\nAlso, note that it is not enough to use the read_csv() function. You also must assign the output of the read_csv() function (i.e. the data we are reading) to a variable, using the assignment arrow <-.\nAnd since the read_csv() is a function from the tidyverse, you first need to attach the tidyverse with library(tidyverse) (remember, you need to attach packages only once in a single Rmarkdown file).\nSo, putting all together:\n\nlibrary(tidyverse)\n\n# CHANGE THE FILE PATH TO MATCH THE PATH ON YOUR COMPUTER\nshallow <- read_csv(\"/Users/ste/r-mini/tutorials/shallow.csv\")\n\nFantastic!\n\n\nView the data\nNow we can view the data.\nThe easiest way is to click on the name of the data listed in the Environment tab, in the top-right panel of RStudio.\nYou will see a nicely formatted table, as you would in something like Excel.\nData tables in R (i.e. spreadsheet-like data) are called data frames or tibbles.\nThe shallow data frame contains 6500 observations and 11 columns (called variables in the Environment tab). The 11 columns are the following\n\nGroup: L1 vs L2 speakers of English.\nID: Subject unique ID.\nList: Word list (A to F).\nTarget: Target word in the lexical decision trial.\nACC: Lexical decision response accuracy (0 incorrect response, 1 correct response).\nRT: Reaction times of response in milliseconds.\nlogRT: Logged reaction times.\nCritical_Filler: Whether the trial was a filler or critical.\nWord_Nonword: Whether the Target was a real Word or a Nonword.\nRelation_type: The type of relation between prime and target word (Unrelated, NonCostituent, Constituent, Phonological).\nBrancing: Constituent syntactic branching, Left and Right (shout out to Charlie Puth).\n\nGreat stuff! See how easy it was to import data?\nYou can easily import other file types as long as they are tabular (i.e. spreadsheet-like), like Excel files.\nFor Excel files (i.e. files with a .xls or .xlsx extension), you need to attach the readxl package with library(readxl) and use the read_excel() function."
  },
  {
    "objectID": "tutorials/tutorial-w02.html#r-scripts",
    "href": "tutorials/tutorial-w02.html#r-scripts",
    "title": "SQM tutorial - Week 2",
    "section": "R scripts",
    "text": "R scripts"
  },
  {
    "objectID": "tutorials/tutorial-w02.html#data-transformation",
    "href": "tutorials/tutorial-w02.html#data-transformation",
    "title": "SQM tutorial - Week 2",
    "section": "Data transformation",
    "text": "Data transformation\nData transformation is a fundamental aspect of data analysis.\nAfter the data you need to use is imported into R, you will have to filter rows, create new columns, or join data frames, among many other transformation operations.\nIn this tutorial we will see how to obtain summary measures.\n\nSummary measures\n\n\nCount occurrences\nWe can use the count() function to count the number of occurrences for each value of a specific column. Let’s count how many trials are correct, i.e. let’s count occurrences in the accuracy column.\nThe function count() takes the name of tibble and the name of column you want to count values in.\n\nshallow %>%\n  count(accuracy)\n\nHow many correct responses are there in the shallow_filt tibble?\nNote that you can add multiple column names, separated by commas, to get counts for the combinations of values of each column.\nTry to get counts of the combination of accuracy and Group. Replace ... with the right code.\nHINT: In count(), include the names of the two columns you want to get counts of, separated by commas.\n\nshallow_filt %>%\n  count(...)\n\nYay!"
  }
]