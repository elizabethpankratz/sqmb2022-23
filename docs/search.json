[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assessments.html",
    "href": "assessments.html",
    "title": "SQMB",
    "section": "",
    "text": "This course will be assessed on the basis of a 3 formative assessments and 2 summative assessments.\nFormative assessments are assessments for which you might receive feedback on, but which will not be marked. These will give you a chance to keep on track with the course contents and get interim feedback that will better prepare you for the summative assessment. See below for info.\nYou will have to submit two summative assessments. They will weight 40% and 60% of the final mark.\nSee below for details."
  },
  {
    "objectID": "assessments.html#formative-assessments",
    "href": "assessments.html#formative-assessments",
    "title": "SQMB",
    "section": "Formative assessments",
    "text": "Formative assessments\n\n\n\n\n\n\nFormative 1: Week 4\n\n\n\n\n\nData summary and visualisation\n\nGiven a data table, submit a short and concise report with summary measurements and plots illustrating patterns in the data.\nCriticise a given plot and provide an appropriate plot for the given data.\nAnswer a set of multiple-choice and true/false questions.\n\n\n\n\n\n\n\n\n\n\nFormative 2: Week 6\n\n\n\n\n\nLinear model fitting and reporting\n\nGiven a data table, submit a short and concise report of a linear model fitted to the data.\nMake sure you include:\n\nA description of the model specification.\nA description of the results.\nAt least one plot generated with conditiona_effects().\n\nCriticise a given linear model and provide code for an appropriate linear model. Just the code is sufficient (you don’t need to run it nor report it).\n\n\n\n\n\n\n\n\n\n\nFormative 3: Week 8\n\n\n\n\n\nData analysis report\n\nGiven a data table, submit a short and concise data analysis report, including summary measures, plots and a linear model.\nMake sure you include:\n\nSummary measures and plots of the raw data.\nA description of the linear model specification and results.\nPlots generated by conditional_effects()."
  },
  {
    "objectID": "assessments.html#summative-assessments",
    "href": "assessments.html#summative-assessments",
    "title": "SQMB",
    "section": "Summative assessments",
    "text": "Summative assessments\n\n\n\n\n\n\nSummative 1 - Thu 30 March\n\n\n\n\n\nDue on Thursday 30 March at noon\nThe first summative contains a series of guided exercises. You can find the summative materials and exercises here: TBA.\n\n\n\n\n\n\n\n\n\nSummative 2 - Thu 27 April\n\n\n\n\n\nDue on Thursday 27 April at noon\nThe second summative will be in the form of a data analysis report. You will choose a data set from a list or you will find a data set yourself for this assessment (guidance will be provided and I will have to approve the data set you picked).\nYou can find the list of data sets here: TBA."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics and Quantitative Methods (Semester 2)",
    "section": "",
    "text": "Welcome to the main site of the course Statistics and Quantitative Methods (Semester 2).\nThis will be your go-to place throughout the semester.\nThis course is an introduction to study design, statistics and quantitative data analysis as commonly employed in linguistics, using the R software."
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Statistics and Quantitative Methods (Semester 2)",
    "section": "Course description",
    "text": "Course description\nThe course will cover the basics of statistics and quantitative data analysis, and how to design studies that effectively address the intended research questions. Students will learn the principles of data visualisation and statistical modelling and develop the practical skills necessary to perform such analyses. The course will draw examples from different branches of linguistics and will provide students with hands-on experience in open science practices.\nThe course will teach students how to carry out Bayesian statistical inference using a variety of statistical models, and how to interpret results from traditional Null Hypothesis Significance Testing (i.e. p-values and confidence intervals)."
  },
  {
    "objectID": "index.html#r-and-rstudio",
    "href": "index.html#r-and-rstudio",
    "title": "Statistics and Quantitative Methods (Semester 2)",
    "section": "R and RStudio",
    "text": "R and RStudio\nThe workshops will be held in the PPLS Computer Lab. The Lab is equipped with PCs running Windows and Ubuntu. The Lab PCs will have all the necessary software.\nYou can choose to use your own laptop instead of the Lab PCs.\nThis requires you to have both R and RStudio installed on your laptop.\n\n\n\n\n\n\nInstallation instructions\n\n\n\nNOTE: If you have installed either R or RStudio prior to January 2023, please delete both R and RStudio from your laptop and reinstall them.\nTo (re)install R and RStudio, follow the instructions for Step 1 and 2 here: https://posit.co/download/rstudio-desktop/."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "SQMB",
    "section": "",
    "text": "This course is an introduction to quantitative data analysis, as commonly employed in linguistics, using the R software.\nWe will cover the following topics:\n\nThe basics of quantitative data analysis.\nData preparation.\nData summaries.\nPrinciples of data visualisation.\nStatistical modelling with linear models.\nStatistical inference using Bayesian inference.\n\nAt completion of the course you will have gained the following skills:\n\nImport common data formats, tidy and transform data.\nChoosing and reporting appropriate summary measures.\nUsing compelling visualisations to communicate a specific message about patterns in the data.\nMaster linear models for different types of data (continuous measures and binary outcomes).\nUsing Bayesian inference to answer research questions and avoid common interpretation pitfalls.\n\nExamples from different branches of linguistics will be used to provide you with hands-on experience in quantitative data analysis and Open Research practices."
  },
  {
    "objectID": "syllabus.html#weekly-plan",
    "href": "syllabus.html#weekly-plan",
    "title": "SQMB",
    "section": "Weekly plan",
    "text": "Weekly plan\n\nWeek 1: Quantitative methods and uncertainty\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat is quantitative data analysis?\nWhat is the inference process?\nHow can we talk about uncertainty and variability?\nWhich are the limits of quantitative methods?\n\nSkills\n\nThink critically about statistics, uncertainty and variability.\nUse R to perform simple calculations.\nMaster the basics of the programming language R.\nUse RStudio.\n\n\n\n\n\n\n\n\n\n\nHomework\n\n\n\n\n\nIntake form\n\nYou must complete the intake form before coming to the Tuesday lecture.\nThe link to the form will be circulated via Learn.\n\nInstall R and RStudio\n\nIf you with to use your own laptop for the workshops, instead of the Lab PCs, you need to install both R and RStudio.\nNOTE: If you have installed either R or RStudio prior to January 2023, please make sure you delete both R and RStudio from your laptop.\nPlease, follow the instructions for Step 1 and 2 here: https://posit.co/download/rstudio-desktop/.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nStatistics for Linguists with R, by Bodo Winter (S4LR) Ch. 1. [via library]\nR for Data Science (R4DS) Ch. 1, Ch. 2. [online book]\nStatistical (Re)thinking, by Richard McElreath (SReT), Ch. 1. [via library]\n\nPapers\n\nDarwin Holmes 2020. Researcher Positionality - A Consideration of Its Influence and Place in Qualitative Research - A New Researcher Guide\nJafar 2018. What is positionality and should it be expressed in quantitative studies?\n\nFrom the lecture\n\nSilberzahn et al. 2018. Many Analysts, One Data Set: Making Transparent How Variations in Analytic Choices Affect Results\nCoretta et al. (in principle). Multidimensional signals and analytic flexibility: Estimating degrees of freedom in human speech analyses\nCumming 2014. The New Statistics: Why and How\nKurschke and Liddell 2018. The Bayesian New Statistics: Hypothesis testing, estimation, meta-analysis, and power analysis from a Bayesian perspective\n\n\n\n\n\n\nWeek 2: Data wrangling\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are the types of statistical variables?\nWhich summary measures are appropriate for which types of variables?\nWhat are common measures central tendency?\nWhat are common measures of dispersion?\n\nSkills\n\nOrganise files efficiently.\nImport tabular data in R.\nObtain mean, median, mode, range and standard deviation.\nUse R scripts to save and reuse code.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\nshallow.csv\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nS4LR Ch. 3. [via library]\nR4DS Ch. 4 and Ch. 5. [online book]\n\n\n\n\n\n\nWeek 3: Data visualisation\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are the principles of good data visualisation?\nWhich are the main components of a plot?\nWhich are the appropriate plots for different types of data?\nHow can we visualise uncertainty?\n\nSkills\n\nCreate common types of plots with ggplot2.\nUse colour and shape to effectively convey meaning.\nDescribe a plot in writing and comment on observable patterns.\nFilter and mutate data.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\npolite.csv\nglot_status.rds\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nR4DS Ch. 3. [online book]\nggplot2 documentation.\n\nFrom the lecture\n\nSpiegelhalter 2020. The Art of Statistics: Learning from Data.\n\n\n\n\n\n\nWeek 4: Linear models, Basics I\n\n\n\n\n\n\nFormative assessment 1\n\n\n\n\n\n\nFormative assessment 1 requires you to read, mutate and plot a given data set. You can preview the formative instructions here: https://github.com/uoeling/sqmb-f1.\nWe will use GitHub Classroom for all assessments. For an overview of how GitHub Classroom works, watch these videos.\nGitHub Classroom invitation links will be circulated via Learn.\n\n\n\n\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are statistical models useful for?\nWhat are statistical populations, samples and distributions?\nWhat are statistical variables and which type of relationships exist between variables?\nWhat is a linear model and which are its components?\n\nSkills\n\nFit a linear model with one continuous outcome variable and one continuous predictor with brm().\nInterpret the summary of the model and understand the meaning of the reported coefficients.\nPlot and diagnose linear models.\nDescribe the model specification and results in writing.\n\n\n\n\n\n\nWeek 5: Linear models, Basics II\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nHow can we use linear models with categorical (rather than continuous) predictors?\nWhy do we need to code categorical predictors as numbers? And which are the most common coding methods?\nHow can we represent a linear model using a formula?\nHow do you interpret a linear model with both continuous and categorical predictors?\n\nSkills\n\nMaster contrast coding in R for categorical predictors.\nFit, interpret and plot linear models with continuous and categorical predictors.\nUnderstand treatment and sum coding.\nAdvanced reporting of model specification and results."
  },
  {
    "objectID": "tutorials/tutorial-w01.html",
    "href": "tutorials/tutorial-w01.html",
    "title": "SQM tutorial - Week 1",
    "section": "",
    "text": "R can be used to analyse all sorts of data, from tabular data (also known as “spreadsheets”), textual data, geographic data and even images.\n\nThis course will focus on the analysis of tabular data, since all of the techniques relevant to this type of data also apply to the other types.\n\nThe R community is a very inclusive community and it’s easy to find help. There are several groups that promote R in minority/minoritised groups, like R-Ladies, Africa R, and Rainbow R just to mention a few.\nMoreover, R is open source and free!"
  },
  {
    "objectID": "tutorials/tutorial-w01.html#r-vs-rstudio",
    "href": "tutorials/tutorial-w01.html#r-vs-rstudio",
    "title": "SQM tutorial - Week 1",
    "section": "R vs RStudio",
    "text": "R vs RStudio\nBeginners usually have trouble understanding the difference between R and RStudio.\nLet’s use a car analogy.\nWhat makes the car go is the engine and you can control the engine through the dashboard.\nYou can think of R as an engine and RStudio as the dashboard.\n\n\n\n\n\n\n\nR\n\n\n\n\nR is a programming language.\nWe use programming languages to interact with computers.\nYou run commands written in a console and the related task is executed.\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\n\nRStudio is an Integrated Development Environment or IDE.\nIt helps you using R more efficiently.\nIt has a graphical user interface or GUI.\n\n\n\nThe next section will give you a tour of RStudio."
  },
  {
    "objectID": "tutorials/tutorial-w01.html#rstudio-1",
    "href": "tutorials/tutorial-w01.html#rstudio-1",
    "title": "SQM tutorial - Week 1",
    "section": "RStudio",
    "text": "RStudio\nWhen you open RStudio, you can see the window is divided into 3 panels:\n\nBlue (left): the Console.\nGreen (top-right): the Environment tab.\nPurple (bottom-right): the Files tab.\n\n\nThe Console is where R commands can be executed. Think of this as the interface to R.\nThe Environment tab lists the objects created with R, while in the Files tab you can navigate folders on your computer to get to files and open them in the file Editor.\n\nRStudio projects\nRStudio is an IDE (see above) which allows you to work efficiently with R, all in one place.\nNote that files and data live in folders on your computer, outside of RStudio: do not think of RStudio as an app where you can save files in.\nAll the files that you see in the Files tab are files on your computer and you can access them from the Finder or File Explorer as you would with any other file.\nIn principle, you can open RStudio and then navigate to any folder or file on your computer.\nHowever, there is a more efficient way of working with RStudio: RStudio Projects.\n\n\n\n\n\n\nRStudio Projects\n\n\n\nAn RStudio Project is a folder on your computer that has an .Rproj file.\n\n\nYou can create as many RStudio Projects as you wish, and I recommend to create one per project (your dissertation, a research project, etc…).\nWe will create an RStudio Project for this course. You will be using this Project throughout the semester.\nTo create an RStudio Project, click on the button that looks like a transparent light blue box with a plus, in the top-left corner of RStudio. A window like the one below will pop up.\n\nClick on New Directory then New Project.\n\nNow, this will create a new folder (aka directory) on your computer and will make that an RStudio Project.\nGive a name to your new project, something like the name of the course and year.\nThen you need to specify where to create this new folder/Project. Click on Browse… and navigate to the folder you want to create the new folder/Project in.\nWhen done, click on Create Project. RStudio will automatically open your new project.\n\nYou know you are in an RStudio Project because you can see the name of the Project in the top-right corner of RStudio.\n\n\n\n\n\n\nNote\n\n\n\nWhen working through these tutorials, always make sure you are in the course RStudio Project you just created.\n\n\nIf your see Project (none) in the top-right corner, that means your are not in an RStudio Project.\nThere are several ways of opening an RStudio Project:\n\nYou can go to the RStudio Project folder in Finder or File Explorer and double click on the Rproj file.\nYou can click on File > Open Project in the RStudio menu.\nYou can click on the project name in the top-right corner of RStudio, which will bring up a list of projects. Click on the desired project to open it.\n\n\n\nA few important settings\nBefore moving on, there are a few important settings that you need to change.\n\n\nOpen the RStudio preferences (Tools > Global options...).\nUn-tick Restore .RData into workspace at startup.\nSelect Never in Save workspace to .RData on exit.\nClick OK to confirm the changes."
  },
  {
    "objectID": "tutorials/tutorial-w01.html#r-basics",
    "href": "tutorials/tutorial-w01.html#r-basics",
    "title": "SQM tutorial - Week 1",
    "section": "R basics",
    "text": "R basics\n\nR as a calculator\nWrite the following in the Console, then press ENTER: 1 + 2.\nFantastic! You should see that the answer to the addition has been printed in the Console, like this:\n[1] 3\nNow, try some more operations (write each of the following in the Console and press ENTER). Feel free to add your own to the mix!\n\n67 - 13\n2 * 4\n268 / 43\n\nYou can also chain multiple operations.\n\n6 + 4 - 1 + 2\n4 * 2 + 3 * 2\n\n\n\nVariables\n\nForget-me-not.\n\nMost times, we want to store a certain value so that we can use it again later.\nWe can achieve this by creating variables.\n\n\n\n\n\n\nVariable\n\n\n\nA variable holds one or more values and it’s stored in the computer memory for later use.\n\n\nYou can create a variable by using the assignment operator <-.\nLet’s assign the value 156 to the variable my_num.\n\nmy_num <- 156\n\nNow, check the list of variables in the Environment tab of the top-right panel of RStudio. You should see the my_num variable and its value there.\nNow, you can just call the variable back when you need it! Write the following in the Console and press ENTER.\n\nmy_num\n\n[1] 156\n\n\nA variable like my_num is also called a numeric vector: i.e. a vector that contains a number (hence numeric).\n\n\n\n\n\n\nVector\n\n\n\nA vector is an R object that contains one or more values of the same type.\n\n\nLet’s now try some operations using variables.\n\nincome <- 1200\nexpenses <- 500\nincome - expenses\n\n[1] 700\n\n\nSee? You can use operations with variables too!\nAnd you can also go all the way with variables.\n\nsavings <- income - expenses\n\nAnd check the value…\n\nsavings\n\n[1] 700\n\n\nVectors can hold more than one item or value.\nJust use the combine c() function to create a vector containing multiple values.\nThe following are all numeric vectors.\n\none_i <- 6\n# Vector with 2 values\ntwo_i <- c(6, 8)\n# Vector with 3 values\nthree_i <- c(6, 8, 42)\n\nCheck the list of variables in the Environment tab. You will see now that before the values of two_i and three_i you get the vector type num for numeric. (If the vector has only one value, you don’t see the type in the Enviroment list but it is still of a particular type).\n\n\n\n\n\n\nNumeric vector\n\n\n\nA numeric vector is a vector that holds one or more numeric values.\n\n\nNote that the following are the same:\n\none_i <- 6\none_i\n\n[1] 6\n\none_ii <- c(6)\none_ii\n\n[1] 6\n\n\n\n\nFunctions\n\nR cannot function without… functions.\n\n\n\n\n\n\n\nFunction\n\n\n\nA function is an operation performed on one or more arguments.\n\n\nA function in R has the form function() where:\n\nfunction is the name of the function, like sum.\n() are round parentheses, inside of which you write arguments, separated by commas.\n\nLet’s see an example:\n\nsum(3, 5)\n\n[1] 8\n\n\nThe sum() function sums the number listed as arguments. Above, the arguments are 3 and 5.\nAnd of course arguments can be vectors!\n\nmy_nums <- c(3, 5, 7)\n\nsum(my_nums)\n\n[1] 15\n\nmean(my_nums)\n\n[1] 5\n\n\n\n\nString and logical vectors\n\nNot just numbers.\n\nWe have seen that variables can hold numeric vectors. But vectors are not restricted to being numeric. They can also store strings.\nA string is basically a set of characters (a word, a sentence, a full text).\nIn R, strings have to be quoted using double quotes \" \".\nChange the following strings to your name and surname. Remember to keep the double quotes\n\nname <- \"Stefano\"\nsurname <- \"Coretta\"\n\nname\n\n[1] \"Stefano\"\n\n\nStrings can be used as arguments in functions, like numbers can.\n\ncat(\"My name is\", name, surname)\n\nMy name is Stefano Coretta\n\n\nRemember that you can reuse the same variable name to override the variable value.\n\nname <- \"Raj\"\n\ncat(\"My name is\", name, surname)\n\nMy name is Raj Coretta\n\n\nYou can combine multiple strings into a character vector, using c().\n\n\n\n\n\n\nCharacter vector\n\n\n\nA character vector is a vector that holds one or more strings.\n\n\n\nfruit <- c(\"apple\", \"oranges\", \"bananas\")\nfruit\n\n[1] \"apple\"   \"oranges\" \"bananas\"\n\n\nCheck the Environment tab. Character vectors have chr before the values.\nAnother type of vector is one that contains either TRUE or FALSE. Vectors of this type are called logical vectors and they are listed as logi in the Environment tab.\n\n\n\n\n\n\nLogical vector\n\n\n\nA logical vector is a vector that holds one or more TRUE or FALSE values.\n\n\n\ngroceries <- c(\"apple\", \"flour\", \"margarine\", \"sugar\")\nin_pantry <- c(TRUE, TRUE, FALSE, TRUE)\n\nTRUE and FALSE values must be written in all capitals and without double quotes (they are not strings!)."
  },
  {
    "objectID": "tutorials/tutorial-w02.html",
    "href": "tutorials/tutorial-w02.html",
    "title": "SQM tutorial - Week 2",
    "section": "",
    "text": "In the tutorial last week you’ve been playing around with R and variables.\nBut what if you want to import data in R?\nEasy! You can use the read_csv() function to read a .csv (comma separated value) file. But before we dive in, let’s first talk about some computer basics. (You can skip this section if it’s too basic for you)\n\n\nFiles saved on your computer live in a specific place. For example, if you download a file from a browser (like Google Chrome, Safari or Firefox), the file is normally saved in the Download folder.\nBut where does the Download folder live? Usually, in your user folder! The user folder normally is the name of your account or a name you picked when you created your computer account. In my case, my user folder is simply called ste.\n\n\n\n\n\n\nUser folder\n\n\n\nThe user folder is the folder with the name of your account.\n\n\nSo, let’s assume I download a file, let’s say big_data.csv, in the Download folder of my user folder.\nNow we can represent the location of the big_data.csv file like so:\nste/\n└── Downloads/\n    └── big_data.csv\nTo mark that ste and Downloads are folders, we add a final forward slash /. That simply means “hey! I am a folder!”. big_data.csv is a file, so it doesn’t have a final /.\nInstead, the file name big_data.csv has a file extension. The file extension is .csv. A file extension marks the type of file: in this the big_data file is a .csv file, a comma separated value file (we will see an example of what that looks like later).\nDifferent file type have different file extensions:\n\nExcel files: .xlsx.\nPlain text files: .txt.\nImages: .png, .jpg, .gif.\nAudio: .mp3, .wav.\nVideo: .mp4, .mov, .avi.\nEtc…\n\n\n\n\n\n\n\nFile extension\n\n\n\nA file extension is a sequence of letters that indicates the type of a file and it’s separated with a . from the file name.\n\n\n\n\n\nNow, we can use an alternative, more succinct way, to represent the location of the big_data.csv:\nste/Downloads/big_data.csv\nThis is called a file path! It’s the path through folders that lead you to the file. Folders are separated by / and the file is marked with the extension .csv.\n\n\n\n\n\n\nFile path\n\n\n\nA file path indicates the location of a file on a computer as a path through folders that lead you to the file.\n\n\nNow the million pound question: where does ste/ live on my computer???\nUser folders are located in different places depending on the operating system you are using:\n\nOn macOS: the user folder is in /Users/.\n\nYou will notice that there is a forward slash also before the name of the folder. That is because the /Users/ folder is a top folder, i.e. there are no folders further up in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a computer running macOS would be: /Users/ste/Downloads/big_data.csv.\n\nOn Windows: the user folder is in C:/Users/\n\nYou will notice that C is followed by a colon :. That is because C is a drive, which contains files and folders. C: is not contained by any other folder, i.e. there are no other folders above C: in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a Windows computer would be: C:/Users/ste/Downloads/big_data.csv.\n\n\nWhen a file path starts from a top-most folder, we call that path the absolute file path.\n\n\n\n\n\n\nAbsolute path\n\n\n\nAn absolute path is a file path that starts with a top-most folder.\n\n\nThere is another type of file paths, called relative paths. A relative path is a partial file path, relative to a specific folder. You will learn how to use relative paths below, when we will go through importing files in R using R scripts below.\nImporting files in R is very easy with the tidyverse packages. You just need to know the file type (very often the file extension helps) and the location of the file (i.e. the file path).\nThe next sections will teach you how to import data in R!"
  },
  {
    "objectID": "tutorials/tutorial-w02.html#the-data",
    "href": "tutorials/tutorial-w02.html#the-data",
    "title": "SQM tutorial - Week 2",
    "section": "The data",
    "text": "The data\nFor this tutorial, we will use the data from this paper: Song et al. 2020. Second language users exhibit shallow morphological processing. DOI: 10.1017/S0272263120000170.\n\nDownload the data file\nTo download the file with the data right-click on the following link and download the file: shallow.csv. (Note that tutorial files are also linked in the Syllabus)\nCreate a folder in the RStudio project of the course called data and move the downloaded file into that folder.\nI strongly recommend that you keep the course RStudio project folder as organised as possible. The Open Science Framework has the following recommendations that apply very well to any type of research project.\n\n\n\n\n\n\nOrganising files\n\n\n\n\nUse one folder per project. This will also be your RStudio project folder.\nSeparate raw data from derived data.\nSeparate code from data.\nMake raw data read-only.\n\n\n\nTo learn more about this, check the OSF page Organising files.\nIn brief, what these recommendations mean is that you want a folder for your research project, and inside the folder two folders: one for data and one for code.\nThe data/ folder could further contain raw/ for raw data (data that should not be lost or changed, for example collected data or annotations) and derived/ for data that derives from the raw data, for example through automated data processing.\nI usually also have a separate folder called figs/ or img/ where I save plots. Of course which folders you will have it’s ultimately up to you and needs will vary depending on the project and field!\nThe rest of the tutorial will assume that you have created a folder called data/ and that shallow.csv is in that folder.\nI recommend you to start being very organised with your files from now, whether it’s for this course or your dissertation or else. I also suggest to avoid overly nested structures (for example, avoid having one folder for each week for this course).\n\n\nAbout shallow.csv\nshallow.csv is a .csv file. It looks like this (the following is just an excerpt from the file, specifically the first 5 lines):\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\nA .csv file is basically a format to save tabular data (i.e. data that looks like a table). To separate each column, a .csv file uses a comma , (hence the name “comma separated values”).\nThe first line of the file indicates the names of the columns of the table:\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nThere are 11 columns.\nThen, the rest of the file contains the other rows of the table, with values for each of the 11 columns. Of course, separated by commas.\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\nThe shallow.csv file should be placed in the data/ folder of the course RStudio project.\nNow, let’s import the data!\nImporting .csv files is very easy. You can use the read_csv() function from a collection of R packages known as the tidyverse.\nBut what are R packages? Find out in the following section."
  },
  {
    "objectID": "tutorials/tutorial-w02.html#r-packages",
    "href": "tutorials/tutorial-w02.html#r-packages",
    "title": "SQM tutorial - Week 2",
    "section": "R packages",
    "text": "R packages\nWhen you install R, a library of packages is also installed. Packages are like plug-ins, they provide R with extra functionalities. The default R library contains all of the base R packages.\nYou can check all of the currently installed packages in the bottom-right panel of RStudio, in the Packages tab.\nIf you want to find the path of the R library on your computer, type .libPaths() in the Console. The function returns (i.e. outputs) the path or paths where your R library is.\n\n\n\n\n\n\nR library and packages\n\n\n\n\nThe R library contains the base R packages and all user-installed packages.\nR packages provide R with extra functionalities and are installed into the R library.\n\n\n\n\nInstall packages\nYou can install extra packages in the R library in two ways:\n\nYou can use the install.packages() function. This function takes the name of package you want to install as a string, for example install.packages(\"cowsay\")\nOr you can go the Packages tab in the bottom-right panel of RStudio and click on Install.\n\nGo ahead and try to install a package using the second method. Install the fortunes package (remember to quote the name of the package). After installing you will see that the package fortunes is listed in the Packages tab.\nYou need to install a package ONLY ONCE! Once installed, it’s there for ever, saved in the R library. You will be able to use all of your installed packages in any RStudio project you create.\n\n\nAttach packages\nNow, to use a package you need to attach the package with the library() function. You need to attach the package you want to use once per R session.\nLet’s attach the fortunes package. Run the following code in the Console. Note that while install.packages(\"fortunes\") takes the name of the package as a string, library(fortunes) takes the name of the package without quotes.\n\nlibrary(fortunes)\n\nNow you can use the functions provided by the attached package. Try it out!\n\nfortune()\n\n\nCareful now, or I'll get into a rant about how much you pay for ArcGIS and\nwhether you are getting value for money if bugs become 'well-known'! Bugs in R\ntend to be either 'obscure' or 'fixed' :)\n   -- Barry Rowlingson (in response to a request for rgdal to work around a\n      well-known bug in ArcGIS)\n      R-SIG-Geo (March 2012)\n\n\nTo learn what a function does, you can check its documentation by typing the function name preceded by a ? question mark. Type ?function in the Console and hit ENTER to see the function documentation."
  },
  {
    "objectID": "tutorials/tutorial-w02.html#import-and-view-data",
    "href": "tutorials/tutorial-w02.html#import-and-view-data",
    "title": "SQM tutorial - Week 2",
    "section": "Import and view data",
    "text": "Import and view data\n\nImport the data\nTo import data in R we will use the read_csv() function from the readr package, one of the tidyverse packages.\nThe read_csv() function only requires you to specify the file path as a string (remember, strings are quoted between \" \".\nOn my computer, the file path of shallow.csv is /Users/ste/sqmb/data/shallow.csv, but on your computer the file path will be different, of course.\nAlso, note that it is not enough to use the read_csv() function. You also must assign the output of the read_csv() function (i.e. the data we are reading) to a variable, using the assignment arrow <-.\nAnd since the read_csv() is a function from the tidyverse, you first need to attach the tidyverse packages with library(tidyverse) (remember, you need to attach packages only once per session).\nThis will attach a set of the tidyverse packages that are commonly used in most data analysis applications, including readr. Of course, you can also attach the individual packages directly: library(readr). If you use library(tidyverse) there is no need to attach tidyverse individual packages.\nSo, putting all together, here’s the code. Remember to change the file path to match the path of the file on your computer. Run the code in the Console to read the data.\n\nlibrary(tidyverse)\n\n# CHANGE THE FILE PATH TO MATCH THE PATH ON YOUR COMPUTER\nshallow <- read_csv(\"/Users/ste/sqmb/data/shallow.csv\")\n\nFantastic!\n\n\nView the data\nNow we can view the data.\nThe easiest way is to click on the name of the data listed in the Environment tab, in the top-right panel of RStudio.\nYou will see a nicely formatted table, as you would in something like Excel.\nData tables in R (i.e. spreadsheet-like data) are called data frames or tibbles.\nThe shallow data frame contains 6500 observations and 11 columns (called variables in the Environment tab). The 11 columns are the following:\n\nGroup: L1 vs L2 speakers of English.\nID: Subject unique ID.\nList: Word list (A to F).\nTarget: Target word in the lexical decision trial.\nACC: Lexical decision response accuracy (0 incorrect response, 1 correct response).\nRT: Reaction times of response in milliseconds.\nlogRT: Logged reaction times.\nCritical_Filler: Whether the trial was a filler or critical.\nWord_Nonword: Whether the Target was a real Word or a Nonword.\nRelation_type: The type of relation between prime and target word (Unrelated, NonCostituent, Constituent, Phonological).\nBranching: Constituent syntactic branching, Left and Right (shout out to Charlie Puth).\n\nGreat stuff! See how easy it was to import data?\nYou can easily import other file types as long as they are tabular (i.e. spreadsheet-like), like Excel files.\nFor Excel files (i.e. files with a .xls or .xlsx extension), you need to attach the readxl package with library(readxl) and use the read_excel() function.\nWe will use .csv files throughout the course and I recommend that you use this format for your work too!"
  },
  {
    "objectID": "tutorials/tutorial-w02.html#r-scripts",
    "href": "tutorials/tutorial-w02.html#r-scripts",
    "title": "SQM tutorial - Week 2",
    "section": "R scripts",
    "text": "R scripts\nSo far, you’ve been asked to write code in the Console and run it there.\nBut this is not very efficient. Every time you need to write the code and execute it in the right order and it quickly becomes very difficult to keep track of everything when things start getting more involved.\nA solution is to use R scripts.\n\n\n\n\n\n\nR script\n\n\n\nAn R script is a file with the .R extension that contains R code.\n\n\nFor the rest of this tutorial, you will write all code in an R script.\n\nCreate an R script\nFirst, create a folder called code in your RStudio project folder. This will be the folder where you will save all of your R scripts.\nNow, to create a new R script, look at the top-left corner of RStudio: the first button to the left looks like a white sheet with a green plus sign. This is the New file button. Click on that and you will see a few options to create a new file.\nClick on R Script. A new empty R script will be created and will open in the File Editor window of RStudio.\n\nNote that creating an R script does not automatically saves it on your computer. To do so, either use the keyboard short-cut CMD+S/CTRL+S or click on the floppy disk icon in the menu below the file tab.\n\nSave the file inside the code/ folder with the following name: tutorial-w02.R.\nRemember that all the files of your RStudio project don’t live inside RStudio but on your computer. So you can always access them from the Finder or File Explorer!\n\n\nWrite code\nNow, let’s start filling up that script!\nGenerally, you start the script with calls to library() to load all the packages you need for the script.\nNow we only need one package, tidyverse, but in most cases you will need more than one! The best practice is to attach all of packages first, in the top of your script. Please, get in the habit of doing this from now, so that you can keep your scripts tidy and pretty!\nGo ahead, write the following code in the top of the tutorial-w02.R script.\n\nlibrary(tidyverse)\n\nshallow <- read_csv(\"./data/shallow.csv\")\n\nWait, what is that \"./data/shallow.csv\"? That’s a relative path. We briefly mentioned relative paths above, but let’s understand the details now.\n\n\nRelative paths\n\n\n\n\n\n\nTip\n\n\n\nA relative path is a file path that is relative to a folder, which is represented by ./\n\n\nWhen you are using R scripts in RStudio projects, the ./ folder paths are relative to is the project folder! This is true whichever the name of the folder/project and whichever it’s location on your computer.\nFor example, if your project it’s called awesome_proj and it’s in Downloads/stuff/, then if you write ./data/results.csv you really mean Downloads/stuff/awesome_proj/data/results.csv!\nThe code read_csv(\"./data/shallow.csv\") above will work because you are using an RStudio project and inside the project folder there is a folder called data/ and in it there’s the shallow.csv file.\nSo from now on I encourage you to use RStudio projects, R scripts and relative paths always!\nThe benefit of doing so is that, if you move your project or rename it, or if you share the project with somebody, all the paths will just work because they are relative!\n\n\nRun the script!\nFinally, the time has come to run the script.\nThere are several ways of doing this. The most straightforward is to click on the Run button. You can find this in the top-right corner of the script window.\n\nAn alternative way is to place the text cursor on the line of code you want to run and then press CMD+ENTER/CTRL+ENTER. This will run the line of code and move the text cursor to the next line of code.\nYou can even select multiple lines of code (as you would select text) and press CMD+ENTER/CTRL+ENTER to run multiple lines of code!\nNow that you know how to use R scripts and run code in them, I will assume that you will keep writing new code from this tutorial in your script and run it from there!\nJust another tip: sometimes we might want to add a few lines of text in our script, for example to take notes.\nYou can add so-called comments in R scripts, simply by starting a line with #.\nFor example:\n\n# This is a comment. Let's add 6 + 3.\n6 + 3\n\n[1] 9"
  },
  {
    "objectID": "tutorials/tutorial-w02.html#data-transformation",
    "href": "tutorials/tutorial-w02.html#data-transformation",
    "title": "SQM tutorial - Week 2",
    "section": "Data transformation",
    "text": "Data transformation\nData transformation is a fundamental aspect of data analysis.\nAfter the data you need to use is imported into R, you will have to filter rows, create new columns, or join data frames, among many other transformation operations.\nIn this tutorial we will learn how to obtain summary measures and how to count occurrences using the summarise() and count() functions.\n\nSummary measures\nDuring the lecture, we have learnt two types of measures.\n\n\n\n\n\n\nSummary measures\n\n\n\nMeasures of central tendency (mean, median, mode) indicate the typical or central value of a sample.\nMeasures of dispersion (standard deviation, range) indicate the dispersion of the sample values around the central tendency value.\n\n\nWhen you work with data, you always want to get summary measures for most of the variables in the data.\nData reports usually include summary measures. It is also important to understand which summary measure is appropriate for which type of variable.\nWe have covered this in the lecture, so we won’t go over it again here. Instead, you will learn how to obtain summary measures using the summarise() function from the dplyr tidyverse package.\nsummarise() takes at least two arguments:\n\nThe data frame to summarise.\nOne or more summary function.\n\nFor example, let’s get the mean the reaction time column RT. Easy!\n\nsummarise(shallow, RT_mean = mean(RT))\n\n\n\n  \n\n\n\nGreat! The mean reaction times of the entire sample is 867 ms.\nWhat if we want also the standard deviation? Easy!\n\nsummarise(shallow, RT_mean = mean(RT), RT_sd = sd(RT))\n\n\n\n  \n\n\n\nNow we know that reaction times are on average 867 ms long and have a standard deviation of about 293 ms (rounded to the nearest integer).\nLet’s go all the way and also get the minimum and maximum RT values.\n\nsummarise(\n  shallow,\n  RT_mean = mean(RT), RT_sd = sd(RT),\n  RT_min = min(RT), RT_max = max(RT)\n)\n\n\n\n  \n\n\n\nFab! When writing a data report, you could write something like this.\n\nReaction times are on average 867 ms long (SD = 293 ms), with values ranging from 0 to 1994 ms.\n\nIn some cases, you will want to use the median() instead of the mean(). Note that R has a mode() function, but alas this is not the statistical mode. To get the mode of a categorical variable you can just count the occurrences of the values of that variable and the value that occurs the most is the mode!\n\n\nCount occurrences\nWe can use the count() function from the dplyr tidyverse package to count the number of occurrences for each value of a specific column. Let’s count how many trials are correct, i.e. let’s count occurrences in the ACC column.\nAccuracy has been coded with 0 for incorrect and 1 for correct. We will see how this is not an ideal, although very common way, of coding binary variables. For now let’s keep it as is.\nThe function count() takes the name of tibble and the name of column you want to count values in.\n\ncount(shallow, ACC)\n\nHow many correct responses are there in the shallow tibble?\nNote that you can add multiple column names, separated by commas, to get counts for the combinations of values of each column.\nTry to get counts of the combination of ACC and Group (L1 vs L2 participants). Replace ... with the right code.\n\ncount(shallow, ...)\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn count(), include the names of the two columns you want to get counts of, separated by commas.\n\n\n\nAre there differences in accuracy between the L1 and L2 group?\n\n\nGrouping data\nSometimes you might want to get summary measures for one variable depending on different values of another variable.\nYou can use the group_by() function from the dplyr tidyverse package, together with summarise() to achieve that. Let’s see how it works.\n\ngroup_by(shallow, Group) %>%\n  summarise(\n    RT_mean = mean(RT),\n    RT_sd = sd(RT)\n  )\n\n\n\n  \n\n\n\nThe group_by() function takes at least two arguments:\n\nThe name of the tibble to group.\nThe name of the columns to group the tibble by, separated by commas.\n\nHere we are grouping shallow by Group.\nIf you are baffled by that %>%, keep on reading.\n\n\nWhat the pipe?!\nWait, what is that thing, %>%?\nIt’s called a pipe. Think of a pipe as a teleporter.\nIn the code above we are chaning two functions together using the pipe opeartor %>%. The output of the first function (group_by()) is “teleported” into the second function summarise().\nThe pipe %>% teleports the output of the preceding function as the first argument of the following function. The output of group_by is a (groupped) tibble, and summarise() needs a tibble as its first argument.\nThat’s why the code above works!\nIn fact, you can even use a pipe for the tibble of group_by(), like so:\n\nshallow %>%\n  group_by(Group) %>%\n    summarise(\n      RT_mean = mean(RT),\n      RT_sd = sd(RT)\n    )\n\n\n\n  \n\n\n\nYou see that the output of the code is the same here as it is above.\nFor comparison, this is what the code would look like without the pipe.\n\ngrouped_shallow <- group_by(shallow, Group)\n\nsummarise(\n  grouped_shallow,\n  RT_mean = mean(RT),\n  RT_sd = sd(RT)\n)\n\n\n\n  \n\n\n\nDon’t worry too much if the concept of the pipe is not clear yet. It should become clearer later."
  },
  {
    "objectID": "tutorials/tutorial-w02.html#summary",
    "href": "tutorials/tutorial-w02.html#summary",
    "title": "SQM tutorial - Week 2",
    "section": "Summary",
    "text": "Summary\nYou made it! You completed this week’s tutorial.\nHere’s a summary of the R functions you learnt.\n\n\n\n\n\n\nlibrary() attaches R packages.\nread_csv() reads .csv files in R.\nsummarise() allows you to calculate measures of central tendency and dispersion.\ncount() lets you count the number of occurrences of levels in a categorical variable.\ngroup_by() allows you to group a tibble according to one or more variables.\nThe pipe %>% can be used to chain multiple functions."
  },
  {
    "objectID": "tutorials/tutorial-w03.html#rmarkdown",
    "href": "tutorials/tutorial-w03.html#rmarkdown",
    "title": "SQM tutorial - Week 3",
    "section": "Rmarkdown",
    "text": "Rmarkdown\nLast week, you learnt how to use R scripts to save your code.\nKeeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be reproducible (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).\nR scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with #).\nBut for longer text or complex data analysis reports, R scripts can be a bit cumbersome.\nA solution to this is using Rmarkdown files (they have the .Rmd) extension.\n\nCode… and text!\nRmarkdown is a file format that allows you to mix code and formatted text in the same file.\nThis means that you can write dynamic reports using Rmd files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc…) but they are dynamic in the sense that if, for example, data or code changes, you can just rerun the report Rmd file and all code output (plots, tables, etc…) are updated accordingly!\nYou can watch this short video for a quick tour.\n\n\n\nFormatting text\nR comments in R scripts cannot be formatted (for example, you can’t make bold or italic texts).\nText in Rmd files can be fully formatted using a simple but powerful mark-up language called markdown.\nYou don’t have to learn markdown all in one go, so I encourage you to just learn it bit by bit, in your time. You can look at the the Markdown Guide for an in-depth intro and/or dive in the Markdown Tutorial for a hands-on approach.\nA few quick pointers (you can test them in the Markdown Live Preview:\n\nText can be made italics by enclosing it between single stars: *this text is in italics*.\nYou can make text bold with two stars: **this text is bold!**.\nHeading are created with #: # This is a level-1 heading.\n\n\n\nCreate an Rmd file\nTo create a new Rmd file, just click on the click on the New file button, then R Markdown.... (If you are asked to install/update packages, do so.\n\nA window will open. Add a title of your choice and your name, then click OK.\n\nA new Rmd file will be created and will open in the File Editor panel in RStudio.\nNote that creating an Rmd file does not automatically saves it on your computer. To do so, either use the keyboard short-cut CMD+S/CTRL+S or click on the floppy disk icon in the menu below the file tab.\n\nSave the file inside the code/ folder with the following name: tutorial-w03.Rmd.\nRemember that all the files of your RStudio project don’t live inside RStudio but on your computer. So you can always access them from the Finder or File Explorer!\n\n\nParts of an Rmd file\nAn Rmd file usually has three main parts:\n\nThe preamble (green).\nCode chunks (orange).\nText (blue).\n\n\nEach Rmd file has to start with a preamble, but you can include as many code chunks and as much text as you wish, in any order.\n\n\nRender Rmd files to HTML\nYou can render an Rmd file into a nicely formatted HTML file.\nTo render an Rmd file, just click on the Knit button and an HTML file will be created and saved in the same location of the Rmd file.\n\nIt will also be shown in the Viewer pane, in the bottom-right panel of RStudio.\n\nRendering Rmd files is not restricted to HTML, but also PDFs and even Word documents!\nThis is very handy when you are writing an analysis report you need to share with others.\n\n\nHow to run code\nThe first code chunk in an Rmd file is a special one: it’s called setup and it’s where you attach all the packages needed for running the code in the file.\nIt also has special code from the knitr package. The knitr package is what allows you to run R code from Rmd files.\nThe line knitr::opts_chunk$set(echo = TRUE) sets the option echo to TRUE. The echo option let’s you decide whether you want the R code printed (echoed) in the rendered Rmd file. When echo = TRUE the code is printed, when echo = FALSE the code is not printed.\nNow go ahead and add library(tidyverse) in the line next to the knitr::opts_chunk line.\nTo run the code of a code chunk you can use different approaches:\n\nClick on the green arrow to the right of the code chunk to run the entire code chunk.\nAlternatively, place the text cursor inside the code chunk and press CMD/CTRL + SHIFT + ENTER.\nYou can also run line by line as you do in an R script by placing the text cursor on the line you want to run and press CMD/CTRL + ENTER.\n\nNow delete everything after the setup code chunk and write a new level-2 heading after the chunk. (Remember to leave an empty line between the chunk and the heading.)\n\nYou will use this Rmd file to write text and code for this tutorial. To insert a new code chunk, you can click on the Insert a new code chunk button and then select R, or you can press ALT + CMD/CTRL + I.\n\nA new R code chunk will be inserted at the text cursor position."
  },
  {
    "objectID": "tutorials/tutorial-w03.html#plotting-basics",
    "href": "tutorials/tutorial-w03.html#plotting-basics",
    "title": "SQM tutorial - Week 3",
    "section": "Plotting basics",
    "text": "Plotting basics\nPlotting data in R is easy once you understand the basics.\n\nGraphic systems\nIn R, you can create plots using different systems.\n\nBase R.\nlattice.\nggplot2.\nmore…\n\nIn this course you will learn how to use the ggplot2 system, but before we dive in, let’s have a look at the base R plotting system too.\n\n\nBase R plotting function\nLet’s create two vectors, x and y and plot them. For now, run these in the Console.\n\nx <- 1:10\ny <- x^3\n\nplot(x, y)\n\n\n\n\nEasy!\nNow let’s add a few more things.\n\nplot(x, y, type = \"l\", col = \"purple\", lwd = 3, lty = \"dashed\")\n\n\n\n\nWith plots as simple as this one, the base R plotting system is sufficient, but to create more complex plots (which is virtually always the case), base R gets incredibly complicated.\nInstead we can use the tidyverse package ggplot2. ggplot2 works well with the other tidyverse packages and it follows the same principles, so it is convenient to use it for data visualisation instead of base R!"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#your-first-ggplot2-plot",
    "href": "tutorials/tutorial-w03.html#your-first-ggplot2-plot",
    "title": "SQM tutorial - Week 3",
    "section": "Your first ggplot2 plot",
    "text": "Your first ggplot2 plot\nThe tidyverse package ggplot2 provides users with a consistent set of functions to create captivating graphics.\nRemember: To be able to use the functions in a package, you first need to attach the package. We have already attached the library(tidyverse) packages, among which there is ggplot2, so you don’t need to do anything else.\n\nThe polite data\nWe will use the polite data to learn the basics of plotting using ggplot.\nThe data comes from the paper by Winter and Grawunder. 2020. The phonetic profile of Korean formal and informal speech registers. DOI: 10.1016/j.wocn.2012.08.006\nTo download the file with the data right-click on the following link and download the file: polite.csv. (Note that tutorial files are also linked in the Syllabus). Remember to save the file in data/ in the course project folder.\nWith Rmd files, we can use relative paths to read data. For relative paths to work relative to the project working directory, you need to install the [here](https://here.r-lib.org) package (remember how to install packages?) and add the following line in the setup chunk, just after the first line of code.\nknitr::opts_knit$set(root.dir = here::here())\nNow rerun the setup code chunk to set the new option.\nThis will set the working directory for the Rmd file to the project working directory.\nFinally, create a new code chunk, add the following line of code and then run the code chunk to read the data.\n\npolite <- read_csv(\"data/polite.csv\")\n\nIn this tutorial we will use the following columns:\n\nf0mn: mean f0 (fundamental frequency).\nH1H2: difference between H2 and H1 (second and first harmonic).\ngender: speaker’s gender.\nmusicstudent: whether the speaker is a music student (yes) or not (no).\n\n\n\nA basic plot\nThese are the minimum constituents of a ggplot2 plot.\n\nThe data: you have to specify the data frame with the data you want to plot.\nThe mapping: the mapping tells ggplot how to map data columns to parts of the plot like the axes or groupings within the data. These parts are called aesthetics, or aes for short.\n\nYou can specify the data and mapping with the data and mapping arguments of the ggplot() function.\nNote that the mapping argument is always specified with aes().\nIn the following bare plot, we are just mapping the mean f0 (f0) to the x-axis and the H2-H1 difference to the y-axis, from the polite data frame.\nCreate a new code chunk, copy the following code and run it. From this point on I will assume you’ll create a new code chunk and run the code yourself, without explicit instructions.\n\nggplot(\n  data = polite,\n  mapping = aes(x = f0mn, y = H1H2)\n)\n\n\n\n\nNot much to see here: just two axes!\n\n\nLet’s add geometries\nNice, but we are missing the most important part: showing the data!\nData is represented with geometries, or geoms for short. geoms are added to the base ggplot with functions whose names all start with geom_.\nFor this plot, you want to use geom_point(). This geom simply adds point to the plot based on the data in the polite data frame.\nReplace ... with the geom in the following code and run it.\n\nggplot(\n  data = polite,\n  mapping = aes(x = f0mn, y = H1H2)\n) +\n  ...\n\nThis type of plot, with two continuous axes and data represented by points, is called a scatter plot\n\n\nFunction arguments\nNote that the data and mapping arguments don’t have to be named explicitly (with data = and mapping =) in the ggplot() function, since they are obligatory and they are specified in that order.\n\nggplot(\n  polite,\n  aes(x = f0mn, y = H1H2)\n) +\n  geom_point()\n\n\n\n\nIn fact, you can also leave out x = and y =.\n\nggplot(\n  polite,\n  aes(f0mn, H1H2)\n) +\n  geom_point()\n\nWarning: Removed 12 rows containing missing values (`geom_point()`).\n\n\n\n\n\nTry running ?ggplot in the Console to see the arguments of the function and the order they appear in.\n\n\n\n\n\n\nQuestion\n\n\n\nWhich of the following will produce the same plot as the one above?\n\nggplot(polite, aes(H1H2, f0mn)) + geom_point()\nggplot(polite, aes(y = H1H2, x = f0mn)) + geom_point()\nggplot(polite, aes(y = f0mn, x = H1H2)) + geom_point()"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#bar-charts",
    "href": "tutorials/tutorial-w03.html#bar-charts",
    "title": "SQM tutorial - Week 3",
    "section": "Bar charts",
    "text": "Bar charts\nAnother common type of plot is the bar chart.\nBar charts are useful when you are counting things. In the following example, we will be counting the number of languages by their endangerment status.\n\nDo you understand me?\nThere are thousands of languages in the world, but most of them are loosing speakers, and some are already no longer spoken. The endangerment status of a language in the data is on a scale from not endangered (languages with large populations of speakers) through threatened, shifting and nearly extinct, to extinct (languages that have no living speakers left).\nThe glot_status data frame contains the endangerment status for 7,845 languages from Glottolog. To download the file with the data right-click on the following link and download the file: glot_status.rds. (Note that tutorial files are also linked in the Syllabus). Remember to save the file in data/ in the course project folder.\nThis time the file is not a .csv file but an .rds file. .rds files are files that can save any R object. They are commonly used to save data frames, like in this case.\nTo read an .rds file you need the readRDS() function.\n\nglot_status <- readRDS(\"data/glot_status.rds\")\n\nHere’s what the data frame looks like.\n\nglot_status\n\n\n\n  \n\n\n\nThe most important columns are:\n\nName: the language name.\nstatus: the endangerment status of the language.\nMacroarea: the geographic macro-area the language is spoken in.\n\n\n\nCreate a bar chart\nTo create a bar chart, add geom_bar() to the plot.\nYou only need one axis, the x axis to be precise, because the y-axis will have the counts.\n\nglot_status %>%\n  ggplot(aes(x = status)) +\n  ...\n\nNote how the counting is done automatically. R looks in the AES column and counts how many times each value in the column occurs in the data frame.\n\n\nStacked bar charts\nA special type of bar charts are the so-called stacked bar charts. These are bar charts where each bar contains a “stack” of shorter bars, each indicating the counts of some sub-groups.\nTo create a stacked bar chart, you just need to add a new aesthetic mapping: fill. The fill aesthetic let’s you fill bars or areas with different colours depending on the values of a specified column.\nLet’s make a plot on language endangerment by macro-area.\nComplete the following code by specifying that fill should be based on status.\n\nggplot(\n  data = glot_status,\n  mapping = aes(x = Macroarea, ...)\n) +\n  geom_bar()\n\nWhat if we want to move the colour legend to the bottom of the plot?\nCheck out the documentation of theme by typing ?theme in the RStudio Console and press ENTER. Search for the word position.\n\n\n\n\n\n\nQuestion\n\n\n\nWhich of the following moves the legend to the bottom of the plot?\n\nlegend(\"bottom\")\ntheme(legend.position = \"bottom\")\ntheme(legend.bottom)"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#faceting-and-panels",
    "href": "tutorials/tutorial-w03.html#faceting-and-panels",
    "title": "SQM tutorial - Week 3",
    "section": "Faceting and panels",
    "text": "Faceting and panels\nSometimes we might want to separate the data into separate panels.\nWe can achieve that easily using faceting.\n\nPolite again\nLet’s reproduce one of the plots from above, but this time let’s use the colour aesthetic to colour the points by gender.\n\npolite %>%\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point()\n\n\n\n\n\n\nDoes being a music student matter?\nThat looks great, but we want to know if being a music student has an effect on the relationship of f0mn and H1H2.\nIn the plot above, the aesthetics mappings are the following:\n\nf0mn on the x-axis.\nH1H2 on the y-axis.\ngender as colour.\n\nHow can we separate data further depending on whether the participant is a music student or not?\nWe can create panels using facet_grid(). This function takes lists of variables to specify panels in rows and/or columns.\nThe syntax is a bit strange. Check the documentation with ?facet_grid() (especially the examples) to see how it works and then complete the code below and run it to produce a plot with two column panels for musicstudent.\n\npolite %>%\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point() +\n  facet_grid(...)\n\nThat’s all for this week!\nNext week, you will learn how to create density and violin plots and how to customise legends, titles and labels!"
  },
  {
    "objectID": "tutorials/tutorial-w04.html",
    "href": "tutorials/tutorial-w04.html",
    "title": "Tutorial 4",
    "section": "",
    "text": "Density plots show the distribution of the values of a continuous variable.\nTake for example the Reaction Times (RT) values in the MAssive Lexical Decision data set (mald_1_1).\n\nmald_1_1\n\n\n\nTo plot the density of a continuous variable, you can use the density geometry.\nFill in the following code to create a density plot.\n\nmald_1_1 %>%\n  ggplot(aes(RT)) +\n  ...\n\n\nRemember that all geometries start with geom_?\n\n\n\n\nThe density line shows you a smoothed representation of the data distribution, but you might also want to see the raw data.\nYou can do so by adding the rug geometry.\n\nmald_1_1 %>%\n  ggplot(aes(RT)) +\n  geom_density() +\n  ...\n\n\n\n\nAn efficient way of showing the distribution of continuous variables depending on discrete groups (like attitude) are the so-called violin plots.\nGo ahead and run the following code.\n\npolite %>%\n  ggplot(aes(attitude, f0mn)) +\n  geom_violin()\n\nThey are called violin plots because they look like violins!\n\n\n\nYou can lay over raw data on top of the violins.\nTo do so, you can use the jitter geometry. Fill the following code chunk and run it.\n\npolite %>%\n  ggplot(aes(attitude, f0mn)) +\n  geom_violin() +\n  ...\n\nThat doesn’t look great right? The points are spread too widely.\nWe can fix that by specifying the argument width in the jitter geometry something smaller than 0.5. Try a few values until you think it looks better.\n\npolite %>%\n  ggplot(aes(attitude, f0mn)) +\n  geom_violin() +\n  ...\n\n\ngeom_jitter(width = ...)\n\nNote that the order between the violin and jitter geoms is important. If you add the jitter geometry before the violin geometry, the violins will just cover up the jittered points (see why it is called “layered” grammar of graphics?).\n\n\n\nLet’s fill the violins with colour. For now, just colour the violins depending on attitude\n\npolite %>%\n  ggplot(aes(attitude, f0mn, ...)) +\n  geom_violin()\n\n\nfill = ...\n\nNot bad! But maybe we can improve by making the fill a bit transparent?\nYou can achieve that with the alpha argument in geom_violin(), which takes a number between 0 (completely transparent) and 1 (completely opaque).\nAdd it to the code above to make the fill transparent. Try different values until you are satisfied with the output.\n\n\n\nIn the previous section we have filled the violins with colours depending on attitude. This helps making the plot somewhat more appealing, but colour there doesn’t add information to the plot: attitude is already marked by the x-axis, so filling by attitude is a bit redundant.\nInstead, we can use the fill argument to separate the data into further groups based on other variables in the data.\nGo ahead and separate the data by gender using the fill argument.\n\npolite %>%\n  ggplot(aes(attitude, f0mn, ...)) +\n  geom_violin()"
  },
  {
    "objectID": "tutorials/tutorial-w04.html#legends-and-labels",
    "href": "tutorials/tutorial-w04.html#legends-and-labels",
    "title": "Tutorial 4",
    "section": "Legends and labels",
    "text": "Legends and labels\n\nPositioning the legend\nThe position of the legend can be set with the legend.position argument in theme().\nMove the legend to the \"bottom\".\n\nggplot(\n  data = glot_status,\n  mapping = aes(x = Macroarea, fill = status)\n) +\n  geom_bar() +\n  ...\n\n\n\nPlot titles and labels\nThe labs() function allows you to set the plot title, subtitle, axis labels and more.\nSince these are strings (i.e. text), they must be quoted with \".\n\nggplot(\n  data = glot_status,\n  mapping = aes(x = Macroarea, fill = status)\n) +\n  geom_bar() +\n  labs(\n    title = \"Number of languages by macro-area and\\nAggregated Endangerement Status\"\n  )\n\nNOTE: We use \\n to split the title into two lines, so that it fits the plot. \\n simply means “new line”.\n\n\nAxis labels\nTo change the axis labels, you specify a string for x and y.\nI have changed the x label here below. Go ahead and change y to \"Number of languages\".\n\nggplot(\n  data = glot_status,\n  mapping = aes(x = Macroarea, fill = status)\n) +\n  geom_bar() +\n  labs(\n    # We use \\n to split the title into two lines. \\n means \"new line\"\n    title = \"Number of languages by macro-area and\\nAggregated Endangerement Status\",\n    x = \"Language macro-area\",\n    ...\n  )"
  }
]