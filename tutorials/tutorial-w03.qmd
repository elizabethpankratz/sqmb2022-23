---
title: "SQM tutorial - Week 3"
editor: visual
execute: 
  eval: false
---

## Rmarkdown

Last week, you learnt how to use R scripts to save your code.

Keeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be **reproducible** (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).

R scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with `#`).

But for longer text or complex data analysis reports, R scripts can be a bit cumbersome.

A solution to this is using Rmarkdown files (they have the `.Rmd`) extension.

### Code... and text!

Rmarkdown is a file format that allows you to mix code and formatted text in the same file.

This means that you can write **dynamic reports** using Rmd files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc...) but they are **dynamic** in the sense that if, for example, data or code changes, you can just rerun the report Rmd file and all code output (plots, tables, etc...) are updated accordingly!

You can watch this short video for a quick tour.

{{< video https://vimeo.com/178485416 >}}

### Formatting text

R comments in R scripts cannot be formatted (for example, you can't make bold or italic texts).

Text in Rmd files can be fully formatted using a simple but powerful **mark-up language** called [markdown](https://www.markdownguide.org).

You don't have to learn markdown all in one go, so I encourage you to just learn it bit by bit, in your time.
You can look at the the [Markdown Guide]() for an in-depth intro and/or dive in the [Markdown Tutorial](https://www.markdowntutorial.com) for a hands-on approach.

A few quick pointers (you can test them in the [Markdown Live Preview](https://markdownlivepreview.com):

- Text can be made italics by enclosing it between single stars: `*this text is in italics*`.

- You can make text bold with two stars: `**this text is bold!**`.

- Heading are created with `#`: `# This is a level-1 heading`.

### Create an Rmd file

To create a new Rmd file, just click on the click on the `New file` button, then `R Markdown...`.

A window will open.
Add a title of your choice and your name, then click `OK`.

A new Rmd file will be created and will open in the File Editor panel in RStudio.

**Note** that creating an Rmd file does not automatically saves it on your computer. To do so, either use the keyboard short-cut `CMD+S`/`CTRL+S` or click on the floppy disk icon in the menu below the file tab.

Save the file inside the `code/` folder with the following name: `tutorial-w03.Rmd`.

Remember that all the files of your RStudio project don't live inside RStudio but on your computer. So you can always access them from the Finder or File Explorer!

## Plotting basics

Plotting data in R is easy once you understand the basics.

### Graphic systems

In R, you can create plots using different systems.

- Base R.
- lattice.
- ggplot2.
- more...

In this course you will learn how to use the ggplot2 system, but before we dive in, let's have a look at the base R plotting system too.

### Base R plotting function

Let's create two vectors, `x` and `y` and plot them.
For now, run these in the Console.

```{r}
#| label: scatter

x <- 1:10
y <- x^3

plot(x, y)
```

Easy!

Now let's add a few more things.

```{r}
#| label: line

plot(x, y, type = "l", col = "purple", lwd = 3, lty = "dashed")
```

With plots as simple as this one, the base R plotting system is sufficient, but to create more complex plots (which is virtually always the case), base R gets incredibly complicated.

Instead we can use the tidyverse package [ggplot2](https://ggplot2.tidyverse.org).
ggplot2 works well with the other tidyverse packages and it follows the same principles, so it is convenient to use it for data visualisation instead of base R!

## Your first ggplot2 plot

The tidyverse package [ggplot2](https://ggplot2.tidyverse.org) provides users with a consistent set of functions to create captivating graphics.

Remember: To be able to use the functions in a package, you first need to **attach the package**.
We can attach it with `library(tidyverse)`, which will also attach other useful tidyverse packages.

Add the following line in a code chunk in the Rmd file you created and then run the code to attach the tidyverse, including ggplot2.

```{r}
#| label: tidy-load

library(tidyverse)
```


### The `polite` data

We will use the `polite` data to learn the basics of plotting using ggplot.

The data comes from the paper by Winter and Grawunder. 2020. *The phonetic profile of Korean formal and informal speech registers*.* DOI: [10.1016/j.wocn.2012.08.006](https://doi.org/10.1016/j.wocn.2012.08.006)

To download the file with the data right-click on the following link and download the file: [polite.csv](data/polite.csv). (Note that tutorial files are also linked in the [Syllabus](../syllabus.qmd)).
Remember to save the file in `data/` in the course project folder.



### A basic plot

These are the minimum constituents of a ggplot2 plot.

- The `data`: you have to specify the data frame with the data you want to plot.

- The `mapping`: the mapping tells ggplot how to map data columns to parts of the plot like the axes or groupings within the data. These parts are called *aesthetics*, or `aes` for short.

You can specify the data and mapping with the `data` and `mapping` arguments of the `ggplot()` function.

Note that the `mapping` argument is always specified with `aes()`.

In the following bare plot, we are just mapping the mean f0 (`f0`) to the *x*-axis and the H2-H1 difference to the *y*-axis, from the `polite` data frame.

```{r bare-plot, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  data = polite,
  mapping = aes(x = f0mn, y = H1H2)
)
```

Not much to see here: just two axes!

### Let's add geometries

Nice, but we are missing the most important part: showing the data!

Data is represented with **geometries**, or `geom`s for short.
`geom`s are added to the base ggplot with functions whose names all start with `geom_`.

For this plot, you want to use `geom_point()`.
This geom simply adds point to the plot based on the data in the `polite` data frame.

Add the geom to the following code and run it.


```{r first-plot, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  data = polite,
  mapping = aes(x = f0mn, y = H1H2)
) +
  ...
```

This type of plot, with two continuous axes and data represented by points, is called a **scatter plot**

### Function arguments

Note that the `data` and `mapping` arguments don't have to be named explicitly (with `data =` and `mapping =`) in the `ggplot()` function, since they are obligatory and they are specified in that order.

```{r named-arguments-1, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  polite,
  aes(x = f0mn, y = H1H2)
) +
  geom_point()
```

In fact, you can also leave out `x =` and `y =`.

```{r named-arguments-2, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  polite,
  aes(f0mn, H1H2)
) +
  geom_point()
```

Try running `?ggplot` in the Console to see the arguments of the function and the order they appear in.

```{r Q-named-arguments, echo=FALSE}
question(
  "Which of the following will produce the same plot as the one above?",
  answer('`ggplot(polite, aes(H1H2, f0mn)) + geom_point()`'),
  answer('`ggplot(polite, aes(y = H1H2, x = f0mn)) + geom_point()`', correct = TRUE),
  answer('`ggplot(polite, aes(y = f0mn, x = H1H2)) + geom_point()`'),
  correct = "Correct! Since the aesthetics are named, it does not matter that *y* comes before *x*.",
  incorrect = "Nope! The mapping of variable to aesthetics *x* and *y* is different from the plot above."
)
```







## Bar charts

Another common type of plot is the **bar chart**.

**Bar charts are useful when you are counting things.**
In the following example, we will be counting the number of languages by their endangerment status.

### Do you understand me?

There are thousands of languages in the world, but most of them are loosing speakers, and some are already no longer spoken.
The endangerment status of a language in the data is on a scale from `not endangered` (languages with large populations of speakers) through `threatened`, `shifting` and `nearly extinct`, to `extinct` (languages that have no living speakers left).

The `glot_aes` data frame contains the endangerment status for 7,845 languages from [Glottolog](https://glottolog.org).
Here's what it looks like.

```{r aes}
glot_aes
```

### Create a bar chart

To create a bar chart, add `geom_bar()` to the plot.

You only need one axis, the *x* axis to be precise, because the *y*-axis will have the counts.

```{r aes-bars, exercise=TRUE}
glot_aes %>%
  ggplot(aes(x = AES)) +
  ...
```

Note how the counting is done automatically.
R looks in the `AES` column and counts how many times each value in the column occurs in the data frame.

If you are baffled by that `%>%`, keep on reading.

### What the pipe?!

Wait, what is that thing, `%>%`?

It's called a **pipe**.
Think of a pipe as a teleporter.

In the previous code chunk, instead of specifying the data frame *inside* `ggplot()`, we teleport it into `ggplot()` by using the pipe.

So the following lines of code are equivalent.

```{r aes-pipe, eval=FALSE}
# Using the pipe
glot_aes %>%
  ggplot(aes(AES)) +
  geom_bar()

# Without the pipe
glot_aes(
  glot_aes, aes(AES)
) +
  geom_bar()
```

Don't worry too much if the concept is not clear yet.
It should become clearer in later tutorials.

### Stacked bar charts

A special type of bar charts are the so-called **stacked bar charts**.
These are bar charts where each bar contains a "stack" of shorter bars, each indicating the counts of some sub-groups.

To create a stacked bar chart, you just need to add a new aesthetic mapping: `fill`.
The `fill` aesthetic let's you fill bars or areas with different colours depending on the values of a specified column.

Let's make a plot on language endangerment by macro-area.

Complete the following code by specifying that `fill` should be based on `AES`.

```{r aes-stacked, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  data = glot_aes,
  mapping = aes(x = Macroarea, ...)
) +
  geom_bar()
```

```{r aes-stacked-hint}
aes(x = Macroarea, fill = ...)
```


What if we want to move the colour legend to the bottom of the plot?

Check out the documentation of `theme` by typing `?theme` in the RStudio Console and press ENTER.
Search for the word `position`.

```{r Q-legend-pos, echo=FALSE}
question(
  "Which of the following moves the legend to the bottom of the plot?",
  answer('`legend("bottom")`'),
  answer('`theme(legend.position = "bottom")`', correct = TRUE),
  answer('`theme(legend.bottom)`')
)
```

## Legends and labels

### Positioning the legend

The position of the legend can be set with the `legend.position` argument in `theme()`.

Move the legend to the `"bottom"`.

```{r aes-legend, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  data = glot_aes,
  mapping = aes(x = Macroarea, fill = AES)
) +
  geom_bar() +
  ...
```

```{r aes-legend-hint}
theme(legend.position = ...)
```

### Plot titles and labels

The `labs()` function allows you to set the plot title, subtitle, axis labels and more.

Since these are strings (i.e. text), they must be quoted with `"`.

```{r aes-title, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  data = glot_aes,
  mapping = aes(x = Macroarea, fill = AES)
) +
  geom_bar() +
  labs(
    title = "Number of languages by macro-area and\nAggregated Endangerement Status"
  )
```

NOTE: We use `\n` to split the title into two lines, so that it fits the plot. `\n` simply means "**n**ew line".

### Axis labels

To change the axis labels, you specify a string for `x` and `y`.

I have changed the `x` label here below.
Go ahead and change `y` to `"Number of languages"`.

```{r aes-labs, exercise=TRUE, exercise.setup = "tidy-load"}
ggplot(
  data = glot_aes,
  mapping = aes(x = Macroarea, fill = AES)
) +
  geom_bar() +
  labs(
    # We use \n to split the title into two lines. \n means "new line"
    title = "Number of languages by macro-area and\nAggregated Endangerement Status",
    x = "Language macro-area",
    ...
  )
```







## Density and violin plots

**Density plots show the distribution of the values of a continuous variable.**

Take for example the Reaction Times (`RT`) values in the *MAssive Lexical Decision* data set (`mald_1_1`).

```{r mald}
mald_1_1
```

### Reaction times

To plot the density of a continuous variable, you can use the `density` geometry.

Fill in the following code to create a density plot.

```{r mald-dens, exercise=TRUE, exercise.setup = "tidy-load"}
mald_1_1 %>%
  ggplot(aes(RT)) +
  ...
```

<div id="mald-dens-hint">
Remember that all geometries start with `geom_`?
</div>

### Make things cozy with a rug

The density line shows you a smoothed representation of the data distribution, but you might also want to see the raw data.

You can do so by adding the `rug` geometry.

```{r mald-dens-rug, exercise=TRUE, exercise.setup = "tidy-load"}
mald_1_1 %>%
  ggplot(aes(RT)) +
  geom_density() +
  ...
```


### Violin plots

An efficient way of showing the distribution of continuous variables depending on discrete groups (like `attitude`) are the so-called **violin plots**.

Go ahead and run the following code.

```{r pol-viol, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn)) +
  geom_violin()
```

They are called violin plots because they look like violins!

### Lay over the raw data

You can lay over raw data on top of the violins.

To do so, you can use the `jitter` geometry.
Fill the following code chunk and run it.

```{r pol-viol-jit, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn)) +
  geom_violin() +
  ...
```

That doesn't look great right?
The points are spread too widely.

We can fix that by specifying the argument `width` in the jitter geometry something smaller than `0.5`.
Try a few values until you think it looks better.

```{r pol-viol-jit-2, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn)) +
  geom_violin() +
  ...
```

```{r pol-viol-jit-2-hint}
geom_jitter(width = ...)
```

Note that the order between the violin and jitter geoms is important.
If you add the jitter geometry before the violin geometry, the violins will just cover up the jittered points (see why it is called "layered" grammar of graphics?).


### Let's add some colour

Let's **fill** the violins with colour.
For now, just colour the violins depending on `attitude`

```{r pol-colour, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn, ...)) +
  geom_violin()
```

```{r pol-colour-hint}
fill = ...
```

Not bad!
But maybe we can improve by making the fill a bit transparent?

You can achieve that with the `alpha` argument in `geom_violin()`, which takes a number between 0 (completely transparent) and 1 (completely opaque).

Add it to the code above to make the fill transparent.
Try different values until you are satisfied with the output.

### Separate the data by gender

In the previous section we have filled the violins with colours depending on `attitude`.
This helps making the plot somewhat more appealing, but colour there doesn't add information to the plot: attitude is already marked by the *x*-axis, so filling by attitude is a bit redundant.

Instead, we can use the fill argument to separate the data into further groups based on other variables in the data.

Go ahead and separate the data by `gender` using the `fill` argument.

```{r pol-colour-gen, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn, ...)) +
  geom_violin()
```

## Faceting and panels

Sometimes we might want to separate the data into separate panels.

We can achieve that easily using **faceting**.

### Attitudes again

Let's recreate the attitude plot from the previous section.

```{r pol-viol-2, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn, fill = gender)) +
  geom_violin()
```

### Does being a music student matter?

That looks great, but we want to know if being a music student has an effect on how attitude affects mean f0.

In the plot above, the aesthetics mappings are the following:

- `attitude` on the *x*-axis.
- `f0mn` on the *y*-axis.
- `gender` as fill in the violin geometry.

How can we separate data further depending on whether the participant is a music student or not?

We can create panels using `facet_grid()`.
This function takes lists of variables to specify panels in rows and/or columns.

The syntax is a bit strange.
Check the documentation with `?facet_grid()` to see how it works and then complete the code below and run it to produce a plot with two column panels.


```{r pol-facet, exercise=TRUE}
polite %>%
  ggplot(aes(attitude, f0mn, fill = gender)) +
  geom_violin() +
  facet_grid(...)
```

```{r pol-facet-hint}
facet_grid(cols = ...)
```

